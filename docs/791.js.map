{"version":3,"sources":["webpack://jxml-react/./docSrc/src/components/Dropdowns/index.js","webpack://jxml-react/./docSrc/src/views/Playground.js"],"names":["items","label","onClick","dropdownPopoverShow","setDropdownPopoverShow","React","btnDropdownRef","popoverDropdownRef","closeDropdownPopover","className","href","ref","e","preventDefault","createPopper","current","placement","map","item","index","itemView","type","code","setCode","useState","loadJXML","onChangeFile","useCallback","file","console","log","name","JxmlPreview","jxml"],"mappings":"mMAgFA,QA5EsB,IAA+B,IAA9B,MAAEA,EAAF,MAASC,EAAOC,WAAc,GAE5CC,EAAqBC,GAA0BC,cAAe,GAC/DC,EAAiBD,gBACjBE,EAAqBF,gBAOrBG,EAAuB,KAC3BJ,GAAuB,IAEzB,OACE,iBAAKK,UAAU,eAAf,WACE,cACEA,UAAU,6MACVC,KAAK,SACLC,IAAKL,EACLJ,QAAUU,IACRA,EAAEC,iBACFV,EAAsBK,MAhB5BM,QAAaR,EAAeS,QAASR,EAAmBQ,QAAS,CAC/DC,UAAW,iBAEbZ,GAAuB,KAOrB,SASGH,KAEH,gBACEU,IAAKJ,EACLE,WACGN,EAAsB,SAAW,WAClC,yFAJJ,SAOGH,GACCA,EAAMiB,KAAI,CAACC,EAAMC,KACf,IAAIC,EAAW,KACf,OAAQF,EAAKG,MACX,IAAK,KACHD,GACE,gBAAKX,UAAU,0DAEjB,MACF,IAAK,OACHW,GACE,cAEEX,UAAU,kHACVP,QAAS,KACPM,IACAN,GAAWA,EAAQgB,IALvB,SAQGA,EAAKjB,OARR,eACekB,IAUjB,MACF,IAAK,WACHC,GACE,iBACEX,UACE,mGAFJ,SAKGS,EAAKjB,QAKd,OAAOmB,WCpEnB,OACE,IAAOE,EAAMC,IAAWC,cAASC,aAC3BC,GAAeC,kBAAaC,IAChCL,EAAQK,EAAKA,MACbC,QAAQC,IAAIF,EAAKA,SAEnB,OACE,iCACE,SAAC,EAAD,CACE3B,MAAM,WACNC,QAAUgB,GAASQ,EAAaR,GAChClB,MAAOyB,SAAcG,IAAD,CAClBP,KAAM,OACNpB,MAAO2B,EAAKG,KACZH,KAAMA,EAAKA,YAGf,SAACI,EAAA,EAAD,CAAaC,KAAMX","file":"791.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { createPopper } from '@popperjs/core';\n\nconst IndexDropdown = ({ items, label, onClick }) => {\n  // dropdown props\n  const [dropdownPopoverShow, setDropdownPopoverShow] = React.useState(false);\n  const btnDropdownRef = React.createRef();\n  const popoverDropdownRef = React.createRef();\n  const openDropdownPopover = () => {\n    createPopper(btnDropdownRef.current, popoverDropdownRef.current, {\n      placement: 'bottom-start',\n    });\n    setDropdownPopoverShow(true);\n  };\n  const closeDropdownPopover = () => {\n    setDropdownPopoverShow(false);\n  };\n  return (\n    <div className=\"mb-4 right-0\">\n      <a\n        className=\"github-star text-white font-bold px-8 py-2 rounded outline-none focus:outline-none bg-blueGray-700 active:bg-blueGray-600 uppercase text-sm shadow hover:shadow-lg ease-linear transition-all duration-150\"\n        href=\"#pablo\"\n        ref={btnDropdownRef}\n        onClick={(e) => {\n          e.preventDefault();\n          dropdownPopoverShow ? closeDropdownPopover() : openDropdownPopover();\n        }}\n      >\n        {label}\n      </a>\n      <div\n        ref={popoverDropdownRef}\n        className={\n          (dropdownPopoverShow ? 'block ' : 'hidden ') +\n          'bg-white text-base z-50 float-left py-2 list-none text-left rounded shadow-lg min-w-48'\n        }\n      >\n        {items &&\n          items.map((item, index) => {\n            let itemView = null;\n            switch (item.type) {\n              case 'hr':\n                itemView = (\n                  <div className=\"h-0 mx-4 my-2 border border-solid border-blueGray-100\" />\n                );\n                break;\n              case 'menu':\n                itemView = (\n                  <a\n                    key={`item-${index}`}\n                    className=\"text-sm py-2 px-4 font-normal block w-full whitespace-nowrap text-blueGray-700 hover:bg-blue-300 cursor-pointer\"\n                    onClick={() => {\n                      closeDropdownPopover();\n                      onClick && onClick(item);\n                    }}\n                  >\n                    {item.label}\n                  </a>\n                );\n                break;\n              case 'category':\n                itemView = (\n                  <span\n                    className={\n                      'text-sm pt-2 pb-0 px-4 font-bold block w-full whitespace-nowrap bg-transparent text-blueGray-400'\n                    }\n                  >\n                    {item.label}\n                  </span>\n                );\n              default:\n            }\n            return itemView;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default IndexDropdown;\n","import React, { useCallback, useState } from 'react';\nimport JxmlPreview from '../components/JxmlPreview';\nimport { loadJXML } from '../libs/loadDocs';\nimport Dropdown from '../components/Dropdowns';\n\nexport default () => {\n  const [code, setCode] = useState(loadJXML[0].file);\n  const onChangeFile = useCallback((file) => {\n    setCode(file.file);\n    console.log(file.file);\n  });\n  return (\n    <>\n      <Dropdown\n        label=\"Examples\"\n        onClick={(item) => onChangeFile(item)}\n        items={loadJXML.map((file) => ({\n          type: 'menu',\n          label: file.name,\n          file: file.file,\n        }))}\n      />\n      <JxmlPreview jxml={code} />\n    </>\n  );\n};\n"],"sourceRoot":""}